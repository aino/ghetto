{"version":3,"sources":["../src/ghetto.js"],"names":[],"mappings":"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","file":"ghetto.js","sourcesContent":["'use strict'\n\nlet express = require('express')\nlet defaultConfig = require('./config')\nlet path = require('path')\nlet _ = require('lodash')\nlet morgan = require('morgan')\nlet cookieParser = require('cookie-parser')\nlet compression = require('compression')\nlet bodyParser = require('body-parser')\n\n\nlet errorHandler = function(err, req, res, next) {\n  next(err)\n}\n\n\n/**\n* Global class that encapsulates the application\n*/\nclass Ghetto {\n\n  constructor(appDir) {\n    if(appDir) {\n      this.setup(appDir)\n    }\n  }\n\n  /**\n  * Sets up the ghetto instance\n  *\n  * @param {String} appDir - Application root directory\n  */\n  setup(appDir) {\n    let userConfig = require(path.join(appDir, 'config'))\n    this.config = _.extend(defaultConfig, userConfig)\n    this.router = require(path.join(appDir, 'router'))\n    this.setupApp()\n    this.setupRoutes()\n    this.setupMiddleware()\n    this.setupSessions()\n    this.setupDB()\n    this.setupErrorHandler()\n  }\n\n  /**\n  * Setups the express app as this.app with some common options\n  */\n  setupApp() {\n    this.app = express()\n    if (this.config.bodyParserOptions.json) {\n        this.app.use( bodyParser.json(this.config.bodyParserOptions.json) )\n    }\n    if (this.config.bodyParserOptions.raw) {\n        this.app.use( bodyParser.raw(this.config.bodyParserOptions.raw) )\n    }\n    if (this.config.bodyParserOptions.text) {\n        this.app.use( bodyParser.text(this.config.bodyParserOptions.text) )\n    }\n    if (this.config.bodyParserOptions.urlencoded) {\n        this.app.use( bodyParser.urlencoded(this.config.bodyParserOptions.urlencoded) )\n    }\n    this.app.use( cookieParser(this.config.cookieParserOptions) )\n    this.app.use( morgan(this.config.morganOptions) )\n    this.app.use( compression(this.config.compressionOptions) )\n  }\n\n  /**\n  * Setup routes for the application\n  */\n  setupRoutes() {\n    let expressRouter = express.Router()\n\n    for (let route of this.router) {\n      let middleware = route[1]\n      let methods = route.length == 3 ? route[2].toLowerCase().split(',') : ['get']\n      if(!(middleware instanceof Array)) {\n        middleware = [middleware]\n      }\n      for (let method of methods) {\n        expressRouter[method](route[0], middleware.map(this.errorWrapper))\n      }\n    }\n    this.app.use(this.config.mountPoint, expressRouter)\n  }\n\n  /**\n  * Sets up middleware\n  */\n  setupMiddleware() {\n    if(this.config.middleware) {\n      for(middleware of this.middleware) {\n        this.app.use(this.errorWrapper(middleware))\n      }\n    }\n  }\n\n  /**\n  * Sets up sessions\n  */\n  setupSessions() {\n    if(this.config.session && this.config.sessionOptions) {\n      this.app.use(\n        this.config.session(this.config.sessionOptions)\n      )\n    }\n  }\n\n  /**\n  * Sets up database\n  */\n  setupDB() {\n    if(this.config.knexOptions) {\n      this.knex = require('knex')(this.config.knexOptions)\n    }\n  }\n\n  /**\n  * Sets up the errror handler\n  */\n  setupErrorHandler() {\n    if(this.config.errorHandler) {\n      errorHandler = this.config.errorHandler\n    }\n  }\n\n  /**\n  * Wrapper for route to catch all unhandled errors\n  *\n  * @param {Function} f - The route/middlware to be wrapped\n  * @returns {Function} The wrapped route/middleware\n  */\n  errorWrapper(f) {\n    let wrapper = async function(req, res, next) {\n      f(req, res, next).catch(err => {\n        errorHandler(err, req, res, next)\n      })\n    }\n    return wrapper\n  }\n\n  /**\n  * Runs the server\n  */\n  run(port) {\n    port = port || process.GHETTO_PORT || this.config.port\n    this.server = this.app.listen(port, function() {\n      console.log(`listening on port ${port}`)\n    })\n  }\n\n}\n\nexports.Ghetto = Ghetto"]}